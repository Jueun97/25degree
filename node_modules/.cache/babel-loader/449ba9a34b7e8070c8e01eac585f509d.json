{"ast":null,"code":"var _jsxFileName = \"/Users/kim-yeeun/Documents/GitHub/25degree/src/component/section/section.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Recommend from \"../recommend/recommend\";\nimport Weather from \"../weather/weather\";\nimport styles from \"./section.module.css\";\nimport Geocode from \"react-geocode\";\nimport GoogleMap from \"../../service/geocode\";\nimport Loading from \"../loading/loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Section = ({\n  getData\n}) => {\n  _s();\n\n  const [data, setData] = useState({\n    currentTemp: null,\n    currentIcon: null,\n    daily: null,\n    hourly: null\n  });\n  const [address, setAddress] = useState(\"\");\n  useEffect(async () => {\n    navigator.geolocation.getCurrentPosition(pos => {\n      getData //\n      .getWeather(pos.coords.latitude, pos.coords.longitude).then(datas => setData({\n        currentTemp: datas.current.temp,\n        currentIcon: datas.current.weather[0].icon,\n        daily: datas.daily,\n        hourly: datas.hourly\n      }));\n      GoogleMap(pos.coords.latitude, pos.coords.longitude).then(res => {\n        console.log(res);\n        setAddress(res);\n      });\n      console.log(address);\n    });\n  }, [getData]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.section,\n    children: [address && /*#__PURE__*/_jsxDEV(Weather, {\n      data: data,\n      address: address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 19\n    }, this), address === null && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(Recommend, {\n      temp: data.currentTemp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Section, \"gKE233YS+nPHKdKOHLvLjL5f7Sg=\");\n\n_c = Section;\nexport default Section;\n\nvar _c;\n\n$RefreshReg$(_c, \"Section\");","map":{"version":3,"sources":["/Users/kim-yeeun/Documents/GitHub/25degree/src/component/section/section.jsx"],"names":["React","useEffect","useState","Recommend","Weather","styles","Geocode","GoogleMap","Loading","Section","getData","data","setData","currentTemp","currentIcon","daily","hourly","address","setAddress","navigator","geolocation","getCurrentPosition","pos","getWeather","coords","latitude","longitude","then","datas","current","temp","weather","icon","res","console","log","section"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAC/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC;AAC/BW,IAAAA,WAAW,EAAE,IADkB;AAE/BC,IAAAA,WAAW,EAAE,IAFkB;AAG/BC,IAAAA,KAAK,EAAE,IAHwB;AAI/BC,IAAAA,MAAM,EAAE;AAJuB,GAAD,CAAhC;AAMA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AACAD,EAAAA,SAAS,CAAC,YAAY;AACpBkB,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,GAAD,IAAS;AAChDZ,MAAAA,OAAO,CAAC;AAAD,OACJa,UADH,CACcD,GAAG,CAACE,MAAJ,CAAWC,QADzB,EACmCH,GAAG,CAACE,MAAJ,CAAWE,SAD9C,EAEGC,IAFH,CAESC,KAAD,IACJhB,OAAO,CAAC;AACNC,QAAAA,WAAW,EAAEe,KAAK,CAACC,OAAN,CAAcC,IADrB;AAENhB,QAAAA,WAAW,EAAEc,KAAK,CAACC,OAAN,CAAcE,OAAd,CAAsB,CAAtB,EAAyBC,IAFhC;AAGNjB,QAAAA,KAAK,EAAEa,KAAK,CAACb,KAHP;AAINC,QAAAA,MAAM,EAAEY,KAAK,CAACZ;AAJR,OAAD,CAHX;AAUAT,MAAAA,SAAS,CAACe,GAAG,CAACE,MAAJ,CAAWC,QAAZ,EAAsBH,GAAG,CAACE,MAAJ,CAAWE,SAAjC,CAAT,CAAqDC,IAArD,CAA2DM,GAAD,IAAS;AACjEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAf,QAAAA,UAAU,CAACe,GAAD,CAAV;AACD,OAHD;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYlB,OAAZ;AACD,KAhBD;AAiBD,GAlBQ,EAkBN,CAACP,OAAD,CAlBM,CAAT;AAoBA,sBACE;AAAS,IAAA,SAAS,EAAEL,MAAM,CAAC+B,OAA3B;AAAA,eACGnB,OAAO,iBAAI,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEN,IAAf;AAAqB,MAAA,OAAO,EAAEM;AAA9B;AAAA;AAAA;AAAA;AAAA,YADd,EAEGA,OAAO,KAAK,IAAZ,iBAAoB,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAFvB,eAGE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEN,IAAI,CAACE;AAAtB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAnCD;;GAAMJ,O;;KAAAA,O;AAqCN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Recommend from \"../recommend/recommend\";\nimport Weather from \"../weather/weather\";\nimport styles from \"./section.module.css\";\nimport Geocode from \"react-geocode\";\nimport GoogleMap from \"../../service/geocode\";\nimport Loading from \"../loading/loading\";\n\nconst Section = ({ getData }) => {\n  const [data, setData] = useState({\n    currentTemp: null,\n    currentIcon: null,\n    daily: null,\n    hourly: null,\n  });\n  const [address, setAddress] = useState(\"\");\n  useEffect(async () => {\n    navigator.geolocation.getCurrentPosition((pos) => {\n      getData //\n        .getWeather(pos.coords.latitude, pos.coords.longitude)\n        .then((datas) =>\n          setData({\n            currentTemp: datas.current.temp,\n            currentIcon: datas.current.weather[0].icon,\n            daily: datas.daily,\n            hourly: datas.hourly,\n          })\n        );\n      GoogleMap(pos.coords.latitude, pos.coords.longitude).then((res) => {\n        console.log(res);\n        setAddress(res);\n      });\n      console.log(address);\n    });\n  }, [getData]);\n\n  return (\n    <section className={styles.section}>\n      {address && <Weather data={data} address={address} />}\n      {address === null && <Loading />}\n      <Recommend temp={data.currentTemp} />\n    </section>\n  );\n};\n\nexport default Section;\n"]},"metadata":{},"sourceType":"module"}